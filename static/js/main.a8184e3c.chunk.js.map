{"version":3,"sources":["WeatherDisplay.jsx","WeatherApp.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","props","className","markup","data","main","push","class","getWeatherMarkup","WeatherApp","useState","location","setLocation","status","setStatus","weatherData","setWeatherData","citySearch","setCitySearch","val","setVal","apiKey","description","useEffect","navigator","geolocation","getCurrentPosition","res","coords","error","toggleDrawer","fetchData","timerPromise","Promise","resolve","setTimeout","weatherApi","axios","get","latitude","longitude","all","then","values","weather","catch","onClick","onChange","e","target","value","placeholder","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a8184e3c.chunk.js","sourcesContent":["import React from 'react'\n\nconst WeatherDisplay = (props) => {\n\n    const getWeatherMarkup = () => {\n        let markup = []\n        switch(props.data.main){\n            case 'Sunny':\n            case 'Clear':\n                markup.push(\n                    <div class=\"icon sunny\">\n                        <div class=\"sun\">\n                            <div class=\"rays\"></div>\n                        </div>\n                    </div>\n                )\n            break;\n            case 'Thunderstorm':\n                markup.push(\n                    <div class=\"icon thunder-storm\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"lightning\">\n                            <div class=\"bolt\"></div>\n                            <div class=\"bolt\"></div>\n                        </div>\n                    </div>\n                )\n            break;\n            case 'Rain':\n            case 'Drizzle':\n                markup.push(\n                    <div class=\"icon rainy\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"rain\"></div>\n                    </div>\n                )\n            break;\n            case 'Snow':\n                markup.push(\n                    <div class=\"icon flurries\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"snow\">\n                            <div class=\"flake\"></div>\n                            <div class=\"flake\"></div>\n                        </div>\n                    </div>\n                )\n            break;\n            case 'initial':\n                markup.push(\n                    <div class=\"icon sun-shower\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"sun\">\n                            <div class=\"rays\"></div>\n                        </div>\n                        <div class=\"rain\"></div>\n                    </div>\n                )\n            break;\n            default:\n                markup.push(\n                    <div class=\"icon cloudy\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"cloud\"></div>\n                    </div>\n                )\n        }\n        return markup;\n    }\n\n    return(\n        <div className='weather-display'>\n            {getWeatherMarkup()}\n        </div>\n    )\n}\n\nexport default WeatherDisplay","import React,{useState, useEffect} from 'react'\nimport axios from 'axios';\nimport WeatherDisplay from './WeatherDisplay'\nimport './app.scss'\n\nconst WeatherApp = () => {\n    const [location, setLocation] = useState(false);\n    const [status, setStatus] = useState('default');\n    const [weatherData, setWeatherData] = useState(false);\n    const [citySearch, setCitySearch] = useState(false);\n    const [val, setVal] = useState('')\n    const apiKey = 'b7759e9875ae91e00ca69cd66bc660ac';\n\n    const description = {\n        \"Haze\": \"Hazy outside, perhaps it wouldn't be the worst idea to carry an umbrella\",\n        \"Sunny\": \"The sun is out, birds are chirping. What a lovely day to be alive\",\n        \"Rain\": \"Yes, it is raining ! Don't wake the old man up\",\n        \"Drizzle\": \"Light drizzle, could get heavy could stop, who knows ? This is a free app lower your expectations\",\n        \"Thunderstorm\": \"Fuckin hell, There's a storm coming Mr. Wayne ! Get inside & lock the doors\",\n        \"Snow\": \"Its snowing outside ! Time to make some snow angles\",\n        \"Clear\": \"Clear outside, nothing special to report about\",\n        \"Clouds\": \"The Clouds are out, but are they rain clouds ? It's a secret\"\n\n    }\n\n    useEffect(()=>{\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(res=>{setLocation(res.coords)}, (error)=>{\n                setLocation('Failed')\n            });\n        }else {\n            setLocation('NoSupport');\n        }\n    }, [])\n\n    const toggleDrawer = (val) => {\n        setCitySearch(val);\n        setWeatherData(false);\n        setStatus('default');\n        setVal('');\n    }\n\n    const fetchData = () => {\n        if(status == 'done' && !citySearch){\n            setStatus('default');\n            setWeatherData(null);\n            return;\n        }\n        setStatus('fetching');\n        const timerPromise = new Promise((resolve)=>{\n            setTimeout(()=>{\n                resolve(123)\n            }, [2000])\n        })\n\n        // const weatherApi = new Promise((resolve)=>{\n        //     resolve({data: {\n        //         weather: [{\n        //             main: 'Thunderstorm'\n        //         }]\n        //     }})\n        // })\n\n        const weatherApi = citySearch ? \n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${val}&appid=${apiKey}`) : \n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${location.latitude}&lon=${location.longitude}&appid=${apiKey}`);\n        Promise.all([timerPromise, weatherApi])\n        .then(values => {\n            const res = values[1].data;\n            setWeatherData({\n                ...res.weather[0]\n            })\n            setStatus('done')\n        })\n        .catch(()=>{\n            setStatus('default');\n        })\n    }\n\n    return(\n        <div className='weather-app'>\n            <div className={`location-based`}>\n                {\n                    location ? \n                        location == 'NoSupport' ? <div className='description'>Device does not support location</div> : \n                        location == 'Failed' ? <div className='description'>Could not fetch device location. Kindly review device settings or use the search by city option</div> : \n                        <div>\n                            {   \n                                status == 'done' ? \n                                <WeatherDisplay \n                                    data={weatherData}\n                                /> : \n                                <WeatherDisplay \n                                    data={{\n                                        main: 'initial'\n                                    }}\n                                />\n                            }\n                            {\n                                <div className='fetch-button' onClick={fetchData}>\n                                    {   status == 'default' ? 'Is It Raining Outside ?' :\n                                        status == 'done' ? 'Reset' :\n                                        <i className=\"fa fa-circle-o-notch fa-spin\"></i>    \n                                    }\n                                </div>\n                            }\n                            {status!='done' ? <div className='description'>\n                                    Hit the button above and find out whats the weather outside like\n                                </div> : \n                                <div className='description'>{description[weatherData.main] ? description[weatherData.main] : description[\"Clear\"]}</div>\n                            }\n                        </div>\n                    : <div className='description'> \n                        Fetching Device Location\n                        <div className='large-icon'>\n                            <i className=\"fa fa-circle-o-notch fa-spin\"></i>\n                        </div>\n                    </div>\n                }\n            </div>\n            <div className={`city-based ${citySearch ? 'open' : ''}`}>\n                {!citySearch ? <div className='fetch-button' onClick={()=>{\n                    toggleDrawer(true);\n                }}>\n                    Search By City\n                </div> : \n                <div>\n                    <div className='cross-icon' onClick={()=>toggleDrawer(false)}>x</div>\n                    <input \n                        onChange={(e)=>{\n                            setVal(e.target.value)\n                        }}\n                        value={val}\n                        className='input-field'\n                        placeholder='City Name'\n                    />\n                    <div className='fetch-button' onClick={fetchData}>\n                        {status == 'default' ? 'Search' :\n                                        status == 'done' ? 'Search' :\n                                        <i className=\"fa fa-circle-o-notch fa-spin\"></i> }\n                    </div>\n                    {status == 'done' ? \n                        <>\n                            <WeatherDisplay \n                                data={weatherData}\n                            />\n                            <div className='description'>{weatherData.main}</div>\n                        </> : null\n                    }\n                </div>\n                }\n            </div>\n            {citySearch && <div className='overlay' onClick={()=>toggleDrawer(false)}></div>}\n        </div>\n    )\n\n\n}\n\nexport default WeatherApp","import WeatherApp from './WeatherApp'\n\nconst App = () => {\n\tconst isPWA = true;\n\tif(isPWA){\n\t\treturn (\n\t\t\t<WeatherApp />\n\t\t)\n\t}else{\n\t\treturn (\n\t\t\t<div>NOT PWA</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}