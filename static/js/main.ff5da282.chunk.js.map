{"version":3,"sources":["WeatherDisplay.jsx","WeatherApp.jsx","SplashScreen.jsx","App.js","index.js"],"names":["WeatherDisplay","props","className","markup","data","main","push","class","getWeatherMarkup","WeatherApp","useState","location","setLocation","status","setStatus","weatherData","setWeatherData","citySearch","setCitySearch","val","setVal","apiKey","description","useEffect","navigator","geolocation","getCurrentPosition","res","coords","error","toggleDrawer","fetchData","timerPromise","Promise","resolve","setTimeout","weatherApi","axios","get","latitude","longitude","all","then","values","weather","catch","onClick","onChange","e","target","value","placeholder","SplashScreen","splash","setSplash","animationStart","setAnimation","App","isPWA","window","matchMedia","matches","iOSDevice","test","userAgent","serviceWorker","register","scope","reg","console","log","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff5da282.chunk.js","sourcesContent":["import React from 'react'\n\nconst WeatherDisplay = (props) => {\n\n    const getWeatherMarkup = () => {\n        let markup = []\n        switch(props.data.main){\n            case 'Sunny':\n            case 'Clear':\n                markup.push(\n                    <div class=\"icon sunny\">\n                        <div class=\"sun\">\n                            <div class=\"rays\"></div>\n                        </div>\n                    </div>\n                )\n            break;\n            case 'Thunderstorm':\n                markup.push(\n                    <div class=\"icon thunder-storm\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"lightning\">\n                            <div class=\"bolt\"></div>\n                            <div class=\"bolt\"></div>\n                        </div>\n                    </div>\n                )\n            break;\n            case 'Rain':\n            case 'Drizzle':\n                markup.push(\n                    <div class=\"icon rainy\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"rain\"></div>\n                    </div>\n                )\n            break;\n            case 'Snow':\n                markup.push(\n                    <div class=\"icon flurries\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"snow\">\n                            <div class=\"flake\"></div>\n                            <div class=\"flake\"></div>\n                        </div>\n                    </div>\n                )\n            break;\n            case 'initial':\n                markup.push(\n                    <div class=\"icon sun-shower\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"sun\">\n                            <div class=\"rays\"></div>\n                        </div>\n                        <div class=\"rain\"></div>\n                    </div>\n                )\n            break;\n            default:\n                markup.push(\n                    <div class=\"icon cloudy\">\n                        <div class=\"cloud\"></div>\n                        <div class=\"cloud\"></div>\n                    </div>\n                )\n        }\n        return markup;\n    }\n\n    return(\n        <div className='weather-display'>\n            {getWeatherMarkup()}\n        </div>\n    )\n}\n\nexport default WeatherDisplay","import React,{useState, useEffect} from 'react'\nimport axios from 'axios';\nimport WeatherDisplay from './WeatherDisplay'\n\nconst WeatherApp = () => {\n    const [location, setLocation] = useState(false);\n    const [status, setStatus] = useState('default');\n    const [weatherData, setWeatherData] = useState(false);\n    const [citySearch, setCitySearch] = useState(false);\n    const [val, setVal] = useState('')\n    const apiKey = 'b7759e9875ae91e00ca69cd66bc660ac';\n\n    const description = {\n        \"Haze\": \"Hazy outside, perhaps it wouldn't be the worst idea to carry an umbrella\",\n        \"Sunny\": \"The sun is out, birds are chirping. What a lovely day to be alive\",\n        \"Rain\": \"Yes, it is raining ! Don't wake the old man up\",\n        \"Drizzle\": \"Light drizzle, could get heavy could stop, who knows ?\",\n        \"Thunderstorm\": \"There's a storm coming Mr. Wayne\",\n        \"Snow\": \"Brace yourself. Winter is Here\",\n        \"Clear\": \"Clear outside, nothing special to report about\",\n        \"Clouds\": \"The Clouds are out, but are they rain clouds ? It's a secret\"\n    }\n\n    useEffect(()=>{\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(res=>{setLocation(res.coords)}, (error)=>{\n                setLocation('Failed')\n            });\n        }else {\n            setLocation('NoSupport');\n        }\n    }, [])\n\n    const toggleDrawer = (val) => {\n        setCitySearch(val);\n        setWeatherData(false);\n        setStatus('default');\n        setVal('');\n    }\n\n    const fetchData = () => {\n        if(status == 'done' && !citySearch){\n            setStatus('default');\n            setWeatherData(null);\n            return;\n        }\n        setStatus('fetching');\n        const timerPromise = new Promise((resolve)=>{\n            setTimeout(()=>{\n                resolve(123)\n            }, [2000])\n        })\n\n        // const weatherApi = new Promise((resolve)=>{\n        //     resolve({data: {\n        //         weather: [{\n        //             main: 'Thunderstorm'\n        //         }]\n        //     }})\n        // })\n\n        const weatherApi = citySearch ? \n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${val}&appid=${apiKey}`) : \n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${location.latitude}&lon=${location.longitude}&appid=${apiKey}`);\n        Promise.all([timerPromise, weatherApi])\n        .then(values => {\n            const res = values[1].data;\n            setWeatherData({\n                ...res.weather[0]\n            })\n            setStatus('done')\n        })\n        .catch(()=>{\n            setStatus('default');\n        })\n    }\n\n    return(\n        <div className='weather-app'>\n            <div className={`location-based`}>\n                {\n                    location ? \n                        location == 'NoSupport' ? <div className='description'>Device does not support location</div> : \n                        location == 'Failed' ? <div className='description'>Could not fetch device location. Kindly review device settings or use the search by city option</div> : \n                        <div>\n                            {   \n                                status == 'done' ? \n                                <WeatherDisplay \n                                    data={weatherData}\n                                /> : \n                                <WeatherDisplay \n                                    data={{\n                                        main: 'initial'\n                                    }}\n                                />\n                            }\n                            {\n                                <div className='fetch-button' onClick={fetchData}>\n                                    {   status == 'default' ? 'Is It Raining Outside ?' :\n                                        status == 'done' ? 'Reset' :\n                                        <i className=\"fa fa-circle-o-notch fa-spin\"></i>    \n                                    }\n                                </div>\n                            }\n                            {status!='done' ? <div className='description'>\n                                    Hit the button above and find out whats the weather outside like\n                                </div> : \n                                <div className='description'>{description[weatherData.main] ? description[weatherData.main] : description[\"Clear\"]}</div>\n                            }\n                        </div>\n                    : <div className='description'> \n                        Fetching Device Location\n                        <div className='large-icon'>\n                            <i className=\"fa fa-circle-o-notch fa-spin\"></i>\n                        </div>\n                    </div>\n                }\n            </div>\n            <div className={`city-based ${citySearch ? 'open' : ''}`}>\n                {!citySearch ? <div className='fetch-button' onClick={()=>{\n                    toggleDrawer(true);\n                }}>\n                    Search By City\n                </div> : \n                <div>\n                    <div className='cross-icon' onClick={()=>toggleDrawer(false)}>x</div>\n                    <input \n                        onChange={(e)=>{\n                            setVal(e.target.value)\n                        }}\n                        value={val}\n                        className='input-field'\n                        placeholder='City Name'\n                    />\n                    <div className='fetch-button' onClick={fetchData}>\n                        {status == 'default' ? 'Search' :\n                                        status == 'done' ? 'Search' :\n                                        <i className=\"fa fa-circle-o-notch fa-spin\"></i> }\n                    </div>\n                    {status == 'done' ? \n                        <>\n                            <WeatherDisplay \n                                data={weatherData}\n                            />\n                            <div className='description'>{weatherData.main}</div>\n                        </> : null\n                    }\n                </div>\n                }\n            </div>\n            {citySearch && <div className='overlay' onClick={()=>toggleDrawer(false)}></div>}\n        </div>\n    )\n\n\n}\n\nexport default WeatherApp","import React, {useState, useEffect} from 'react'\nimport WeatherApp from './WeatherApp';\n\nconst SplashScreen = () => {\n    const [splash, setSplash] = useState(true);\n    const [animationStart, setAnimation] = useState(false);\n    useEffect(()=>{\n        setTimeout(()=>{\n            setAnimation(true);\n            setTimeout(()=>{\n                setSplash(false);\n            }, 1000)\n        }, 300)\n    }, [])\n\n    return(\n        <>\n            <div className={`splash-screen ${splash ? '' : 'hide-splash'}`}>\n                <div className={`main-text ${animationStart ? 'animation-start' : ''}`}>\n                    Is It Raining Outside ?\n                </div>\n                <div className='owner-text'>\n                    Designed by Rajat, Developed by Arik\n                </div>\n            </div>\n            {splash ? null : <WeatherApp />}\n        </>\n    )\n}\n\nexport default SplashScreen","import WeatherApp from './WeatherApp';\nimport SplashScreen from './SplashScreen';\nimport './app.scss';\n\nconst App = () => {\n\tconst isPWA = (window.matchMedia('(display-mode: standalone)').matches);\n\tconst iOSDevice = /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n\tif(isPWA){\n\t\treturn iOSDevice ? <SplashScreen /> : <WeatherApp />\n\t}else{\n\t\treturn (\n\t\t\t<div className='instructions'>\n\t\t\t\t<div className={`arrow ${iOSDevice ? 'iOS-style' : 'android-style'}`} />\n\t\t\t\t<div className={`arrow-head ${iOSDevice ? 'iOS-style' : 'android-style'}`} />\n\t\t\t\t<div className='text'>\n\t\t\t\t\tKindly Install the PWA By Following these steps: <br/>\n\t\t\t\t\t1. Click on the 3 Dots icon in the browser navigation bar <br />\n\t\t\t\t\t2. Select the \"Add to Home screen\"/\"Install App\" option from the list <br />\n\t\t\t\t\t3. Click on the Add button from the Popup that opens <br/>\n\t\t\t\t\t4. After a few seconds the install process will complete and you can use the app<br />\n\t\t\t\t\tNote: This will not work in Incognito/Private Mode\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nif('serviceWorker' in navigator){\n  navigator.serviceWorker.register('/is-it-raining-outside/service-worker.js',{\n    scope: \"/is-it-raining-outside/\"\n  })\n  .then((reg)=>{console.log('Service Worker Registered', reg)})\n  .catch((err)=>{console.log('Registration Failed', err)})\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}